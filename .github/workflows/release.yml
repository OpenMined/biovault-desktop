name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Override version (e.g., v0.1.0). Leave blank to use source version"
        required: false
        default: ""
        type: string
      dry_run:
        description: "Skip publishing release artifacts"
        required: false
        default: false
        type: boolean
      build_macos_arm64:
        description: "Build macOS (Apple Silicon)"
        required: false
        default: true
        type: boolean
      build_macos_x64:
        description: "Build macOS (Intel)"
        required: false
        default: true
        type: boolean
      build_windows_x64:
        description: "Build Windows (x86_64)"
        required: false
        default: true
        type: boolean
      build_linux_x64:
        description: "Build Linux (x86_64)"
        required: false
        default: true
        type: boolean
      build_linux_arm64:
        description: "Build Linux (arm64 via Docker)"
        required: false
        default: true
        type: boolean
  workflow_call:
    inputs:
      version:
        required: false
        type: string
      dry_run:
        required: false
        type: boolean
        default: false
      build_macos_arm64:
        required: false
        type: boolean
        default: true
      build_macos_x64:
        required: false
        type: boolean
        default: true
      build_windows_x64:
        required: false
        type: boolean
        default: true
      build_linux_x64:
        required: false
        type: boolean
        default: true
      build_linux_arm64:
        required: false
        type: boolean
        default: true

jobs:
  prepare-version:
    name: Determine release version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
    steps:
      - name: Checkout project
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Resolve release version
        id: version
        env:
          INPUT_VERSION: ${{ inputs.version }}
        run: |
          python - <<'PY'
          import json
          import json
          import os
          import re
          from pathlib import Path

          def read_source_version() -> str:
              cargo_toml = Path('src-tauri/Cargo.toml')
              if not cargo_toml.exists():
                  raise SystemExit('src-tauri/Cargo.toml not found')
              for line in cargo_toml.read_text().splitlines():
                  if line.strip().startswith('version'):
                      match = re.search(r'version\s*=\s*"([^"]+)"', line)
                      if match:
                          return match.group(1)
              raise SystemExit('Unable to determine version from Cargo.toml')

          raw_input = os.environ.get('INPUT_VERSION', '').strip()
          if raw_input:
              version = raw_input.lstrip('v')
          else:
              version = read_source_version()

          tag = f"v{version}"

          with open(os.environ['GITHUB_OUTPUT'], 'a', encoding='utf-8') as fh:
              fh.write(f"version={version}\n")
              fh.write(f"tag={tag}\n")
          PY

  configure-build-matrix:
    name: Determine build targets
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      has-targets: ${{ steps.set-matrix.outputs.has-targets }}
    steps:
      - name: Build matrix
        id: set-matrix
        env:
          BUILD_MACOS_ARM64: ${{ inputs.build_macos_arm64 }}
          BUILD_MACOS_X64: ${{ inputs.build_macos_x64 }}
          BUILD_WINDOWS_X64: ${{ inputs.build_windows_x64 }}
          BUILD_LINUX_X64: ${{ inputs.build_linux_x64 }}
          BUILD_LINUX_ARM64: ${{ inputs.build_linux_arm64 }}
        run: |
          python - <<'PY'
          import json
          import os

          def is_enabled(key: str) -> bool:
              value = os.environ.get(key, '').strip().lower()
              return value in {'1', 'true', 'yes', 'on'}

          entries = []

          if is_enabled('BUILD_MACOS_ARM64'):
              entries.append({
                  'runs-on': 'macos-latest',
                  'args': 'aarch64-apple-darwin',
                  'build_kind': 'tauri',
                  'target': 'macos-arm64',
              })

          if is_enabled('BUILD_MACOS_X64'):
              entries.append({
                  'runs-on': 'macos-latest',
                  'args': 'x86_64-apple-darwin',
                  'build_kind': 'tauri',
                  'target': 'macos-x64',
              })

          if is_enabled('BUILD_WINDOWS_X64'):
              entries.append({
                  'runs-on': 'windows-latest',
                  'args': 'x86_64-pc-windows-msvc',
                  'build_kind': 'tauri',
                  'target': 'windows-x64',
              })

          if is_enabled('BUILD_LINUX_X64'):
              entries.append({
                  'runs-on': 'ubuntu-22.04',
                  'args': 'x86_64-unknown-linux-gnu',
                  'build_kind': 'tauri',
                  'target': 'linux-x64',
              })

          if is_enabled('BUILD_LINUX_ARM64'):
              entries.append({
                  'runs-on': 'ubuntu-22.04-arm',
                  'args': 'aarch64-unknown-linux-gnu',
                  'build_kind': 'docker',
                  'target': 'linux-arm64',
              })

          matrix = {'include': entries}
          has_targets = 'true' if entries else 'false'

          with open(os.environ['GITHUB_OUTPUT'], 'a', encoding='utf-8') as fh:
              fh.write(f"matrix={json.dumps(matrix)}\n")
              fh.write(f"has-targets={has_targets}\n")
          PY

  build:
    name: Build app bundle
    needs:
      - prepare-version
      - configure-build-matrix
    if: ${{ needs.configure-build-matrix.outputs.has-targets == 'true' }}
    strategy:
      matrix: ${{ fromJSON(needs.configure-build-matrix.outputs.matrix) }}
    runs-on: ${{ matrix.runs-on }}
    env:
      APPLE_ID: ${{ secrets.APPLE_ID }}
      APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
      APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
      TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
      TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
      GH_TOKEN: ${{ github.token }}
      RELEASE_VERSION: ${{ needs.prepare-version.outputs.version }}
    steps:
      - name: Checkout project
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Dry run mode notice
        if: ${{ inputs.dry_run }}
        run: echo "Dry run enabled - release artifacts will not be published."

      - name: Set up Docker Buildx
        if: matrix.build_kind == 'docker'
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        if: matrix.build_kind == 'docker'
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-arm64-${{ hashFiles('docker/linux_arm64/Dockerfile') }}
          restore-keys: |
            ${{ runner.os }}-buildx-arm64-

      - name: Sync version metadata
        shell: bash
        run: |
          python - <<'PY'
          import json
          import os
          import re
          from pathlib import Path

          version = os.environ['RELEASE_VERSION']

          def replace_line(path: Path, pattern: str):
              text = path.read_text()
              new_text, count = re.subn(pattern, f"\\1\"{version}\"", text, count=1, flags=re.MULTILINE)
              if count == 0:
                  raise SystemExit(f'Failed to update version in {path}')
              path.write_text(new_text)

          replace_line(Path('package.json'), r'(\"version\"\s*:\s*)\"[^\"]+\"')
          replace_line(Path('src-tauri/tauri.conf.json'), r'(\"version\"\s*:\s*)\"[^\"]+\"')
          replace_line(Path('src-tauri/Cargo.toml'), r'(version\s*=\s*)\"[^\"]+\"')

          package_lock = Path('package-lock.json')
          if package_lock.exists():
              data = json.loads(package_lock.read_text())
              data['version'] = version
              if 'packages' in data and '' in data['packages']:
                  data['packages']['']['version'] = version
              package_lock.write_text(json.dumps(data, indent=2) + '\n')

          lock_path = Path('src-tauri/Cargo.lock')
          if lock_path.exists():
              content = lock_path.read_text()
              content, count = re.subn(r'(name = \"bv-desktop\"\nversion = )\"[^\"]+\"', rf'\1"{version}"', content, count=1)
              if count == 0:
                  raise SystemExit('Failed to update version in src-tauri/Cargo.lock for bv-desktop')
              lock_path.write_text(content)
          PY

      - name: Import signing certificate into keychain
        if: runner.os == 'macOS'
        uses: apple-actions/import-codesign-certs@v3
        with:
          p12-file-base64: ${{ secrets.SIGNING_CERTIFICATE_P12_DATA }}
          p12-password: ${{ secrets.SIGNING_CERTIFICATE_PASSWORD }}

      - name: Install system dependencies (Linux)
        if: runner.os == 'Linux' && matrix.build_kind == 'tauri'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            build-essential \
            curl \
            wget \
            file \
            libxdo-dev \
            libssl-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev

      - name: Setup Rust
        if: matrix.build_kind == 'tauri'
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.args }}

      - name: Setup Node.js
        if: matrix.build_kind == 'tauri'
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Tauri CLI
        if: matrix.build_kind == 'tauri'
        run: npm install -g @tauri-apps/cli@latest

      - name: Cache Rust dependencies
        if: matrix.build_kind == 'tauri'
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ~/.cargo/bin
            target
            src-tauri/target
          key: ${{ matrix.args }}-cargo-${{ hashFiles('**/Cargo.lock', '**/Cargo.toml') }}
          restore-keys: |
            ${{ matrix.args }}-cargo-

      - name: Build app (macOS)
        if: runner.os == 'macOS'
        run: |
          tauri build --target ${{ matrix.args }}

          mkdir -p artifacts

          mv src-tauri/target/${{ matrix.args }}/release/bundle/dmg/*.dmg artifacts/BioVault-Desktop-${{ matrix.args }}.dmg || true
          mv src-tauri/target/${{ matrix.args }}/release/bundle/macos/*.app.tar.gz artifacts/BioVault-Desktop-${{ matrix.args }}.app.tar.gz || true
          mv src-tauri/target/${{ matrix.args }}/release/bundle/macos/*.app.tar.gz.sig artifacts/BioVault-Desktop-${{ matrix.args }}.app.tar.gz.sig || true

      - name: Build app (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          tauri build --target ${{ matrix.args }}

          New-Item -Path artifacts -ItemType Directory -Force

          Move-Item -Path src-tauri\target\${{ matrix.args }}\release\bundle\nsis\*.exe -Destination artifacts\BioVault-Desktop-${{ matrix.args }}.exe -ErrorAction SilentlyContinue
          Move-Item -Path src-tauri\target\${{ matrix.args }}\release\bundle\nsis\*.exe.sig -Destination artifacts\BioVault-Desktop-${{ matrix.args }}.exe.sig -ErrorAction SilentlyContinue

      - name: Build app (Linux)
        if: runner.os == 'Linux' && matrix.build_kind == 'tauri'
        run: |
          tauri build --target ${{ matrix.args }}

          mkdir -p artifacts

          mv src-tauri/target/${{ matrix.args }}/release/bundle/deb/*.deb artifacts/BioVault-Desktop-${{ matrix.args }}.deb || true
          mv src-tauri/target/${{ matrix.args }}/release/bundle/deb/*.deb.sig artifacts/BioVault-Desktop-${{ matrix.args }}.deb.sig || true

          mv src-tauri/target/${{ matrix.args }}/release/bundle/rpm/*.rpm artifacts/BioVault-Desktop-${{ matrix.args }}.rpm || true
          mv src-tauri/target/${{ matrix.args }}/release/bundle/rpm/*.rpm.sig artifacts/BioVault-Desktop-${{ matrix.args }}.rpm.sig || true

          mv src-tauri/target/${{ matrix.args }}/release/bundle/appimage/*.AppImage artifacts/BioVault-Desktop-${{ matrix.args }}.AppImage || true
          mv src-tauri/target/${{ matrix.args }}/release/bundle/appimage/*.AppImage.sig artifacts/BioVault-Desktop-${{ matrix.args }}.AppImage.sig || true

      - name: Build app (Linux arm64 via Docker)
        if: matrix.build_kind == 'docker'
        run: |
          chmod +x docker/linux_arm64/*.sh
          FORCE_BUILDX=1 BUILD_CACHE="--cache-from type=local,src=/tmp/.buildx-cache --cache-to type=local,dest=/tmp/.buildx-cache-new,mode=max" ./docker/linux_arm64/build-image.sh --arm64
          ./docker/linux_arm64/build-appimage.sh --arm64

          mkdir -p artifacts

          echo "Checking for built artifacts..."
          ls -lh src-tauri/target/${{ matrix.args }}/release/bundle/deb/ || echo "No deb directory"
          ls -lh src-tauri/target/${{ matrix.args }}/release/bundle/rpm/ || echo "No rpm directory"
          ls -lh src-tauri/target/${{ matrix.args }}/release/bundle/appimage/ || echo "No appimage directory"

          echo "Fixing ownership of Docker-built artifacts..."
          sudo chown -R $(id -u):$(id -g) src-tauri/target/${{ matrix.args }}/release/bundle/ || true

          if ls src-tauri/target/${{ matrix.args }}/release/bundle/deb/*.deb 1> /dev/null 2>&1; then
            mv src-tauri/target/${{ matrix.args }}/release/bundle/deb/*.deb artifacts/BioVault-Desktop-${{ matrix.args }}.deb
            mv src-tauri/target/${{ matrix.args }}/release/bundle/deb/*.deb.sig artifacts/BioVault-Desktop-${{ matrix.args }}.deb.sig
          else
            echo "Warning: No .deb artifacts found"
          fi

          if ls src-tauri/target/${{ matrix.args }}/release/bundle/rpm/*.rpm 1> /dev/null 2>&1; then
            mv src-tauri/target/${{ matrix.args }}/release/bundle/rpm/*.rpm artifacts/BioVault-Desktop-${{ matrix.args }}.rpm
            mv src-tauri/target/${{ matrix.args }}/release/bundle/rpm/*.rpm.sig artifacts/BioVault-Desktop-${{ matrix.args }}.rpm.sig
          else
            echo "Warning: No .rpm artifacts found"
          fi

          if ls src-tauri/target/${{ matrix.args }}/release/bundle/appimage/*.AppImage 1> /dev/null 2>&1; then
            mv src-tauri/target/${{ matrix.args }}/release/bundle/appimage/*.AppImage artifacts/BioVault-Desktop-${{ matrix.args }}.AppImage
            mv src-tauri/target/${{ matrix.args }}/release/bundle/appimage/*.AppImage.sig artifacts/BioVault-Desktop-${{ matrix.args }}.AppImage.sig
          else
            echo "Error: No .AppImage artifacts found - build may have failed"
            exit 1
          fi

          echo "Final artifacts:"
          ls -lh artifacts/

      - name: Move Docker cache
        if: matrix.build_kind == 'docker'
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache || true

      - name: Create release (macOS)
        if: ${{ inputs.dry_run != true && runner.os == 'macOS' }}
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ needs.prepare-version.outputs.tag }}
          name: ${{ needs.prepare-version.outputs.tag }}
          draft: false
          allowUpdates: true
          omitBodyDuringUpdate: true
          makeLatest: true
          artifacts: |
            ./artifacts/*.app.tar.gz
            ./artifacts/*.app.tar.gz.sig
            ./artifacts/*.dmg

      - name: Create release (Linux)
        if: ${{ inputs.dry_run != true && runner.os == 'Linux' }}
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ needs.prepare-version.outputs.tag }}
          name: ${{ needs.prepare-version.outputs.tag }}
          draft: false
          allowUpdates: true
          omitBodyDuringUpdate: true
          makeLatest: true
          artifacts: |
            ./artifacts/*.AppImage
            ./artifacts/*.AppImage.sig

      - name: Create release (Windows)
        if: ${{ inputs.dry_run != true && runner.os == 'Windows' }}
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ needs.prepare-version.outputs.tag }}
          name: ${{ needs.prepare-version.outputs.tag }}
          draft: false
          allowUpdates: true
          omitBodyDuringUpdate: true
          makeLatest: true
          artifacts: |
            ./artifacts/*.exe
            ./artifacts/*.exe.sig

      - name: Clean up all user keychains
        if: always() && runner.os == 'macOS'
        run: |
          keychains=$(security list-keychains | tr -d '" "')

          echo "$keychains" | while IFS= read -r keychain; do
            if [[ "$keychain" != "/Library/Keychains/System.keychain" && "$keychain" != "/Library/Keychains/SystemRootCertificates.keychain" ]]; then
              echo "Deleting keychain: $keychain"
              security delete-keychain "$keychain"
            else
              echo "Skipping system keychain: $keychain"
            fi
          done

  create-updater-json:
    name: Generate updater manifest
    needs:
      - prepare-version
      - build
    if: ${{ inputs.dry_run != true }}
    runs-on: ubuntu-latest
    env:
      RELEASE_TAG: ${{ needs.prepare-version.outputs.tag }}
      RELEASE_VERSION: ${{ needs.prepare-version.outputs.version }}
    steps:
      - name: Download release artifacts
        run: |
          gh release download ${{ env.RELEASE_TAG }} \
            --repo ${{ github.repository }} \
            --pattern '*.sig' \
            --dir signatures
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Generate release.json
        run: |
          python - <<'PY'
          import json
          import os
          from pathlib import Path

          version = os.environ['RELEASE_VERSION']
          tag = os.environ['RELEASE_TAG']
          repo = os.environ['GITHUB_REPOSITORY']

          sig_dir = Path('signatures')

          platforms = {}

          # macOS aarch64
          sig_file = sig_dir / 'BioVault-Desktop-aarch64-apple-darwin.app.tar.gz.sig'
          if sig_file.exists():
              platforms['darwin-aarch64'] = {
                  'signature': sig_file.read_text().strip(),
                  'url': f'https://github.com/{repo}/releases/download/{tag}/BioVault-Desktop-aarch64-apple-darwin.app.tar.gz'
              }

          # macOS x86_64
          sig_file = sig_dir / 'BioVault-Desktop-x86_64-apple-darwin.app.tar.gz.sig'
          if sig_file.exists():
              platforms['darwin-x86_64'] = {
                  'signature': sig_file.read_text().strip(),
                  'url': f'https://github.com/{repo}/releases/download/{tag}/BioVault-Desktop-x86_64-apple-darwin.app.tar.gz'
              }

          # Windows x86_64
          sig_file = sig_dir / 'BioVault-Desktop-x86_64-pc-windows-msvc.exe.sig'
          if sig_file.exists():
              platforms['windows-x86_64'] = {
                  'signature': sig_file.read_text().strip(),
                  'url': f'https://github.com/{repo}/releases/download/{tag}/BioVault-Desktop-x86_64-pc-windows-msvc.exe'
              }

          # Linux x86_64
          sig_file = sig_dir / 'BioVault-Desktop-x86_64-unknown-linux-gnu.AppImage.sig'
          if sig_file.exists():
              platforms['linux-x86_64'] = {
                  'signature': sig_file.read_text().strip(),
                  'url': f'https://github.com/{repo}/releases/download/{tag}/BioVault-Desktop-x86_64-unknown-linux-gnu.AppImage'
              }

          # Linux aarch64
          sig_file = sig_dir / 'BioVault-Desktop-aarch64-unknown-linux-gnu.AppImage.sig'
          if sig_file.exists():
              platforms['linux-aarch64'] = {
                  'signature': sig_file.read_text().strip(),
                  'url': f'https://github.com/{repo}/releases/download/{tag}/BioVault-Desktop-aarch64-unknown-linux-gnu.AppImage'
              }

          release_data = {
              'version': tag,
              'notes': f'Release {tag}',
              'pub_date': os.environ.get('RELEASE_DATE', ''),
              'platforms': platforms
          }

          Path('release.json').write_text(json.dumps(release_data, indent=2))
          print(f'Generated release.json with {len(platforms)} platforms')
          PY
        env:
          GITHUB_REPOSITORY: ${{ github.repository }}
          RELEASE_DATE: ${{ github.event.repository.updated_at }}

      - name: Upload release.json to release
        run: |
          gh release upload ${{ env.RELEASE_TAG }} release.json --clobber \
            --repo ${{ github.repository }}
        env:
          GH_TOKEN: ${{ github.token }}

  commit-version:
    name: Commit version bump
    needs:
      - prepare-version
      - build
    if: ${{ inputs.dry_run != true }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      RELEASE_VERSION: ${{ needs.prepare-version.outputs.version }}
      RELEASE_TAG: ${{ needs.prepare-version.outputs.tag }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Sync version metadata
        run: |
          python - <<'PY'
          import json
          import os
          import re
          from pathlib import Path

          version = os.environ['RELEASE_VERSION']

          def replace_line(path: Path, pattern: str):
              text = path.read_text()
              new_text, count = re.subn(pattern, f"\\1\"{version}\"", text, count=1, flags=re.MULTILINE)
              if count == 0:
                  raise SystemExit(f'Failed to update version in {path}')
              path.write_text(new_text)

          replace_line(Path('package.json'), r'(\"version\"\s*:\s*)\"[^\"]+\"')
          replace_line(Path('src-tauri/tauri.conf.json'), r'(\"version\"\s*:\s*)\"[^\"]+\"')
          replace_line(Path('src-tauri/Cargo.toml'), r'(version\s*=\s*)\"[^\"]+\"')

          package_lock = Path('package-lock.json')
          if package_lock.exists():
              data = json.loads(package_lock.read_text())
              data['version'] = version
              if 'packages' in data and '' in data['packages']:
                  data['packages']['']['version'] = version
              package_lock.write_text(json.dumps(data, indent=2) + '\n')

          lock_path = Path('src-tauri/Cargo.lock')
          if lock_path.exists():
              content = lock_path.read_text()
              content, count = re.subn(r'(name = \"bv-desktop\"\nversion = )\"[^\"]+\"', rf'\1"{version}"', content, count=1)
              if count == 0:
                  raise SystemExit('Failed to update version in src-tauri/Cargo.lock for bv-desktop')
              lock_path.write_text(content)
          PY

      - name: Commit and push changes
        run: |
          if git diff --quiet; then
            echo "No version changes to commit."
            exit 0
          fi

          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add package.json package-lock.json src-tauri/Cargo.toml src-tauri/tauri.conf.json src-tauri/Cargo.lock
          git commit -m "chore: release ${RELEASE_TAG}"
          git push origin HEAD:${{ github.ref_name }}

      - name: Bump to next version
        run: |
          python - <<'PY'
          import json
          import re
          from pathlib import Path

          current = "${{ env.RELEASE_VERSION }}"
          parts = current.split('.')
          parts[-1] = str(int(parts[-1]) + 1)
          next_version = '.'.join(parts)

          def replace_line(path: Path, pattern: str):
              text = path.read_text()
              new_text, count = re.subn(pattern, f"\\1\"{next_version}\"", text, count=1, flags=re.MULTILINE)
              if count == 0:
                  raise SystemExit(f'Failed to update version in {path}')
              path.write_text(new_text)

          replace_line(Path('package.json'), r'(\"version\"\s*:\s*)\"[^\"]+\"')
          replace_line(Path('src-tauri/tauri.conf.json'), r'(\"version\"\s*:\s*)\"[^\"]+\"')
          replace_line(Path('src-tauri/Cargo.toml'), r'(version\s*=\s*)\"[^\"]+\"')

          package_lock = Path('package-lock.json')
          if package_lock.exists():
              data = json.loads(package_lock.read_text())
              data['version'] = next_version
              if 'packages' in data and '' in data['packages']:
                  data['packages']['']['version'] = next_version
              package_lock.write_text(json.dumps(data, indent=2) + '\n')

          lock_path = Path('src-tauri/Cargo.lock')
          if lock_path.exists():
              content = lock_path.read_text()
              content, count = re.subn(r'(name = \"bv-desktop\"\nversion = )\"[^\"]+\"', rf'\1"{next_version}"', content, count=1)
              if count == 0:
                  raise SystemExit('Failed to update version in src-tauri/Cargo.lock for bv-desktop')
              lock_path.write_text(content)

          print(f"Bumped version from {current} to {next_version}")
          PY

          NEXT_VERSION=$(python -c "import os; parts = os.environ['RELEASE_VERSION'].split('.'); parts[-1] = str(int(parts[-1]) + 1); print('.'.join(parts))")
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add package.json package-lock.json src-tauri/Cargo.toml src-tauri/tauri.conf.json src-tauri/Cargo.lock
          git commit -m "chore: bump version to ${NEXT_VERSION}"
          git push origin HEAD:${{ github.ref_name }}
