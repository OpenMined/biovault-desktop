name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Override version (e.g., v0.1.0). Leave blank to use source version"
        required: false
        default: ""
        type: string
      dry_run:
        description: "Skip publishing release artifacts"
        required: false
        default: false
        type: boolean
  workflow_call:
    inputs:
      version:
        required: false
        type: string
      dry_run:
        required: false
        type: boolean

jobs:
  prepare-version:
    name: Determine release version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
    steps:
      - name: Checkout project
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Resolve release version
        id: version
        env:
          INPUT_VERSION: ${{ inputs.version }}
        run: |
          python - <<'PY'
          import os
          import re
          from pathlib import Path

          def read_source_version() -> str:
              cargo_toml = Path('src-tauri/Cargo.toml')
              if not cargo_toml.exists():
                  raise SystemExit('src-tauri/Cargo.toml not found')
              for line in cargo_toml.read_text().splitlines():
                  if line.strip().startswith('version'):
                      match = re.search(r'version\s*=\s*"([^"]+)"', line)
                      if match:
                          return match.group(1)
              raise SystemExit('Unable to determine version from Cargo.toml')

          raw_input = os.environ.get('INPUT_VERSION', '').strip()
          if raw_input:
              version = raw_input.lstrip('v')
          else:
              version = read_source_version()

          tag = f"v{version}"

          with open(os.environ['GITHUB_OUTPUT'], 'a', encoding='utf-8') as fh:
              fh.write(f"version={version}\n")
              fh.write(f"tag={tag}\n")
          PY

  build:
    name: Build app bundle
    needs: prepare-version
    strategy:
      matrix:
        include:
          - runs-on: macos-latest
            args: "aarch64-apple-darwin"
            build_kind: tauri
          - runs-on: macos-latest
            args: "x86_64-apple-darwin"
            build_kind: tauri
          - runs-on: windows-latest
            args: "x86_64-pc-windows-msvc"
            build_kind: tauri
          - runs-on: ubuntu-22.04
            args: "x86_64-unknown-linux-gnu"
            build_kind: tauri
    runs-on: ${{ matrix.runs-on }}
    env:
      APPLE_ID: ${{ secrets.APPLE_ID }}
      APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
      APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
      TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
      TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
      GH_TOKEN: ${{ github.token }}
      RELEASE_VERSION: ${{ needs.prepare-version.outputs.version }}
    steps:
      - name: Checkout project
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Dry run mode notice
        if: ${{ inputs.dry_run }}
        run: echo "Dry run enabled - release artifacts will not be published."

      - name: Sync version metadata
        shell: bash
        run: |
          python - <<'PY'
          import os
          import re
          from pathlib import Path

          version = os.environ['RELEASE_VERSION']

          def replace_line(path: Path, pattern: str):
              text = path.read_text()
              new_text, count = re.subn(pattern, f"\\1\"{version}\"", text, count=1, flags=re.MULTILINE)
              if count == 0:
                  raise SystemExit(f'Failed to update version in {path}')
              path.write_text(new_text)

          replace_line(Path('package.json'), r'(\"version\"\s*:\s*)\"[^\"]+\"')
          replace_line(Path('src-tauri/tauri.conf.json'), r'(\"version\"\s*:\s*)\"[^\"]+\"')
          replace_line(Path('src-tauri/Cargo.toml'), r'(version\s*=\s*)\"[^\"]+\"')

          lock_path = Path('src-tauri/Cargo.lock')
          if lock_path.exists():
              content = lock_path.read_text()
              content, count = re.subn(r'(name = \"bv-desktop\"\nversion = )\"[^\"]+\"', rf'\1"{version}"', content, count=1)
              if count == 0:
                  raise SystemExit('Failed to update version in src-tauri/Cargo.lock for bv-desktop')
              lock_path.write_text(content)
          PY

      - name: Import signing certificate into keychain
        if: runner.os == 'macOS'
        uses: apple-actions/import-codesign-certs@v3
        with:
          p12-file-base64: ${{ secrets.SIGNING_CERTIFICATE_P12_DATA }}
          p12-password: ${{ secrets.SIGNING_CERTIFICATE_PASSWORD }}

      - name: Install system dependencies (Linux)
        if: runner.os == 'Linux' && matrix.build_kind == 'tauri'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            build-essential \
            curl \
            wget \
            file \
            libxdo-dev \
            libssl-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev

      - name: Setup Rust
        if: matrix.build_kind == 'tauri'
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.args }}

      - name: Setup Node.js
        if: matrix.build_kind == 'tauri'
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Tauri CLI
        if: matrix.build_kind == 'tauri'
        run: npm install -g @tauri-apps/cli@latest

      - name: Cache Rust dependencies
        if: matrix.build_kind == 'tauri'
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ~/.cargo/bin
            target
            src-tauri/target
          key: ${{ matrix.args }}-cargo-${{ hashFiles('**/Cargo.lock', '**/Cargo.toml') }}
          restore-keys: |
            ${{ matrix.args }}-cargo-

      - name: Build app (macOS)
        if: runner.os == 'macOS'
        run: |
          tauri build --target ${{ matrix.args }}

          mkdir -p artifacts

          mv src-tauri/target/${{ matrix.args }}/release/bundle/dmg/*.dmg artifacts/BioVault-Desktop-${{ matrix.args }}.dmg || true
          mv src-tauri/target/${{ matrix.args }}/release/bundle/macos/*.app.tar.gz artifacts/BioVault-Desktop-${{ matrix.args }}.app.tar.gz || true
          mv src-tauri/target/${{ matrix.args }}/release/bundle/macos/*.app.tar.gz.sig artifacts/BioVault-Desktop-${{ matrix.args }}.app.tar.gz.sig || true

      - name: Build app (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          tauri build --target ${{ matrix.args }}

          New-Item -Path artifacts -ItemType Directory -Force

          Move-Item -Path src-tauri\target\${{ matrix.args }}\release\bundle\nsis\*.exe -Destination artifacts\BioVault-Desktop-${{ matrix.args }}.exe -ErrorAction SilentlyContinue
          Move-Item -Path src-tauri\target\${{ matrix.args }}\release\bundle\nsis\*.exe.sig -Destination artifacts\BioVault-Desktop-${{ matrix.args }}.exe.sig -ErrorAction SilentlyContinue

      - name: Build app (Linux)
        if: runner.os == 'Linux' && matrix.build_kind == 'tauri'
        run: |
          tauri build --target ${{ matrix.args }}

          mkdir -p artifacts

          mv src-tauri/target/${{ matrix.args }}/release/bundle/deb/*.deb artifacts/BioVault-Desktop-${{ matrix.args }}.deb || true
          mv src-tauri/target/${{ matrix.args }}/release/bundle/deb/*.deb.sig artifacts/BioVault-Desktop-${{ matrix.args }}.deb.sig || true

          mv src-tauri/target/${{ matrix.args }}/release/bundle/rpm/*.rpm artifacts/BioVault-Desktop-${{ matrix.args }}.rpm || true
          mv src-tauri/target/${{ matrix.args }}/release/bundle/rpm/*.rpm.sig artifacts/BioVault-Desktop-${{ matrix.args }}.rpm.sig || true

          mv src-tauri/target/${{ matrix.args }}/release/bundle/appimage/*.AppImage artifacts/BioVault-Desktop-${{ matrix.args }}.AppImage || true
          mv src-tauri/target/${{ matrix.args }}/release/bundle/appimage/*.AppImage.sig artifacts/BioVault-Desktop-${{ matrix.args }}.AppImage.sig || true

      - name: Create release
        if: ${{ inputs.dry_run != true }}
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ needs.prepare-version.outputs.tag }}
          name: ${{ needs.prepare-version.outputs.tag }}
          draft: false
          allowUpdates: true
          omitBodyDuringUpdate: true
          makeLatest: true
          artifacts: |
            ./artifacts/*.app.tar.gz
            ./artifacts/*.app.tar.gz.sig

            ./artifacts/*.AppImage
            ./artifacts/*.AppImage.sig

            ./artifacts/*.deb
            ./artifacts/*.deb.sig

            ./artifacts/*.dmg
            ./artifacts/*.dmg.sig

            ./artifacts/*.exe
            ./artifacts/*.exe.sig

            ./artifacts/*.rpm
            ./artifacts/*.rpm.sig

      - name: Clean up all user keychains
        if: always() && runner.os == 'macOS'
        run: |
          keychains=$(security list-keychains | tr -d '" "')

          echo "$keychains" | while IFS= read -r keychain; do
            if [[ "$keychain" != "/Library/Keychains/System.keychain" && "$keychain" != "/Library/Keychains/SystemRootCertificates.keychain" ]]; then
              echo "Deleting keychain: $keychain"
              security delete-keychain "$keychain"
            else
              echo "Skipping system keychain: $keychain"
            fi
          done

  build-linux-arm64:
    name: Build Linux arm64 bundle
    needs:
      - prepare-version
      - build
    runs-on: ubuntu-22.04-arm
    env:
      TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
      TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
      GH_TOKEN: ${{ github.token }}
      RELEASE_VERSION: ${{ needs.prepare-version.outputs.version }}
    steps:
      - name: Checkout project
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Dry run mode notice
        if: ${{ inputs.dry_run }}
        run: echo "Dry run enabled - release artifacts will not be published."

      - name: Sync version metadata
        shell: bash
        run: |
          python - <<'PY'
          import os
          import re
          from pathlib import Path

          version = os.environ['RELEASE_VERSION']

          def replace_line(path: Path, pattern: str):
              text = path.read_text()
              new_text, count = re.subn(pattern, f"\\1\"{version}\"", text, count=1, flags=re.MULTILINE)
              if count == 0:
                  raise SystemExit(f'Failed to update version in {path}')
              path.write_text(new_text)

          replace_line(Path('package.json'), r'(\"version\"\s*:\s*)\"[^\"]+\"')
          replace_line(Path('src-tauri/tauri.conf.json'), r'(\"version\"\s*:\s*)\"[^\"]+\"')
          replace_line(Path('src-tauri/Cargo.toml'), r'(version\s*=\s*)\"[^\"]+\"')

          lock_path = Path('src-tauri/Cargo.lock')
          if lock_path.exists():
              content = lock_path.read_text()
              content, count = re.subn(r'(name = \"bv-desktop\"\nversion = )\"[^\"]+\"', rf'\1"{version}"', content, count=1)
              if count == 0:
                  raise SystemExit('Failed to update version in src-tauri/Cargo.lock for bv-desktop')
              lock_path.write_text(content)
          PY

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-arm64-${{ hashFiles('docker/linux_arm64/Dockerfile') }}
          restore-keys: |
            ${{ runner.os }}-buildx-arm64-

      - name: Build app (Linux arm64 via Docker)
        run: |
          chmod +x docker/linux_arm64/*.sh
          FORCE_BUILDX=1 BUILD_CACHE="--cache-from type=local,src=/tmp/.buildx-cache --cache-to type=local,dest=/tmp/.buildx-cache-new,mode=max" ./docker/linux_arm64/build-image.sh --arm64
          ./docker/linux_arm64/build-appimage.sh --arm64

          mkdir -p artifacts

          mv src-tauri/target/aarch64-unknown-linux-gnu/release/bundle/deb/*.deb artifacts/BioVault-Desktop-aarch64-unknown-linux-gnu.deb || true
          mv src-tauri/target/aarch64-unknown-linux-gnu/release/bundle/deb/*.deb.sig artifacts/BioVault-Desktop-aarch64-unknown-linux-gnu.deb.sig || true

          mv src-tauri/target/aarch64-unknown-linux-gnu/release/bundle/rpm/*.rpm artifacts/BioVault-Desktop-aarch64-unknown-linux-gnu.rpm || true
          mv src-tauri/target/aarch64-unknown-linux-gnu/release/bundle/rpm/*.rpm.sig artifacts/BioVault-Desktop-aarch64-unknown-linux-gnu.rpm.sig || true

          mv src-tauri/target/aarch64-unknown-linux-gnu/release/bundle/appimage/*.AppImage artifacts/BioVault-Desktop-aarch64-unknown-linux-gnu.AppImage || true
          mv src-tauri/target/aarch64-unknown-linux-gnu/release/bundle/appimage/*.AppImage.sig artifacts/BioVault-Desktop-aarch64-unknown-linux-gnu.AppImage.sig || true

      - name: Move Docker cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache || true

      - name: Publish arm64 artifacts to release
        if: ${{ inputs.dry_run != true }}
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ needs.prepare-version.outputs.tag }}
          name: ${{ needs.prepare-version.outputs.tag }}
          draft: false
          allowUpdates: true
          omitBodyDuringUpdate: true
          makeLatest: true
          artifacts: |
            ./artifacts/*.AppImage
            ./artifacts/*.AppImage.sig
            ./artifacts/*.deb
            ./artifacts/*.deb.sig
            ./artifacts/*.rpm
            ./artifacts/*.rpm.sig
